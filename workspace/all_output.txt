Unit test for a C# console application can be written using any .NET compatible unit testing framework. Visual Studio includes a unit testing framework called MSTest, but other frameworks like NUnit or xUnit can be used as well. 

Below is an example of a Unit Test for the 'Hello, World!' console application using MSTest:

```csharp
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using HelloWorld;
using System.IO;

namespace HelloWorldTests
{
    [TestClass]
    public class UnitTest1
    {
        private string _consoleOutput;
        
        [TestInitialize]
        public void Setup()
        {
            var output = new StringWriter();
            Console.SetOut(output);
        
            Program.Main(new string[0]);
        
            _consoleOutput = output.ToString();
        }

        [TestMethod]
        public void TestMethod1()
        {
            Assert.IsTrue(_consoleOutput.Contains("Hello, World!"));
        }
    }
}
```

Here's how this works:

1. Before every test, the `SetUp` method is run. In this method, the `Console.SetOut` method is used to redirect the console output to a `StringWriter`.

2. Then the `Main` method of the 'Hello, World!' application is called.

3. The console output can now be accessed as a string through the `StringWriter.ToString` method, and stored in `_consoleOutput`.

4. In the unit test `TestMethod1`, I check if the console output contains "Hello, World!". If it does, the test passes.

This is a simple example and generally, for a real world application, you would have many more unit tests testing various functionality of your code.